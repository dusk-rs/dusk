package rs.dusk.engine.client.ui

import io.mockk.verify
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import rs.dusk.engine.client.ui.Interfaces.Companion.ROOT_ID
import rs.dusk.engine.client.ui.Interfaces.Companion.ROOT_INDEX

internal class InterfaceOpenTest : InterfaceTest() {

    @Test
    fun `Open with name is successful`() {
        interfaces[0] = Interface(id = 0, data = InterfaceData(fixedParent = ROOT_ID, fixedIndex = ROOT_INDEX))
        names["zero"] = 0
        val result = manager.open("zero")
        assertTrue(result)
    }

    @Test
    fun `Open with id is successful`() {
        interfaces[0] = Interface(id = 0, data = InterfaceData(fixedParent = ROOT_ID, fixedIndex = ROOT_INDEX))
        val result = manager.open(0)
        assertTrue(result)
    }

    @Test
    fun `Open with unknown name throws exception`() {
        assertThrows<InterfacesLookup.IllegalNameException> {
            manager.open("unknown")
        }
    }

    @Test
    fun `Open isn't successful if already open`() {
        val id = 0
        interfaces[id] = Interface(id = id, data = InterfaceData(fixedParent = ROOT_ID, fixedIndex = ROOT_INDEX))
        manager.open(id)
        val result = manager.open(id)
        assertFalse(result)
    }

    @Test
    fun `Interface open sends update`() {
        val id = 4
        val data = InterfaceData(fixedParent = ROOT_ID, fixedIndex = ROOT_INDEX)
        interfaces[id] = Interface(id = id, data = data)
        manager.open(id)
        verify { io.sendOpen(Interface(id = id, data = data)) }
    }

    @Test
    fun `Interface open sends parent`() {
        interfaces[4] = Interface(id = 4, data = InterfaceData(fixedParent = 8, fixedIndex = ROOT_INDEX))
        val result = lookup.get(4)
        assertEquals(8, result.getParent(gameframe.resizable))
    }

    @Test
    fun `Interface open not sent if already open`() {
        val id = 4
        val data = InterfaceData(fixedParent = ROOT_ID, fixedIndex = ROOT_INDEX)
        interfaces[id] = Interface(id = id, data = data)
        manager.open(id)
        manager.open(id)
        verify(exactly = 1) { io.sendOpen(Interface(id = id, data = data)) }
    }

    @Test
    fun `Interface open without info throws error`() {
        assertThrows<Interface.InvalidInterfaceException> {
            manager.open(100)
        }
    }
}
